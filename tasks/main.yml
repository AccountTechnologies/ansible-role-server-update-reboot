---
- debug: var=proxy_env
  when: debug_enabled_default | bool

- debug: var=server_update_apt_exclude_pkgs
  when: ansible_os_family == "Debian" and update_default | bool and server_update_apt_exclude_default | bool

- debug: var=server_update_yum_exclude_pkgs
  when: ansible_os_family == "RedHat" and update_default | bool and server_update_yum_exclude_pkgs

- debug: var=server_update_apt_default
  when: ansible_os_family == "Debian" and update_default | bool

- debug: var=server_update_apt_install_pkgs
  when: ansible_os_family == "Debian" and update_default | bool and (server_update_apt_default == "update_specific" or server_update_apt_default == "install")

- debug: var=server_update_yum_install_pkgs
  when: ansible_os_family == "RedHat" and update_default | bool and server_update_yum_install_pkgs is defined

- pause:
    seconds: 5

#Exclude updating package(s), hack using apt-mark to temp hold before and unhold after update
#Not using dpkg_selections module since it can't use wildcard.
- name: apt | exclude a package from updating (hold)
  command: "apt-mark hold {{item}}"
  with_items:
    - "{{ server_update_apt_exclude_pkgs }}"
  when: ansible_os_family == "Debian" and update_default | bool and server_update_apt_exclude_default | bool

#Upgrade and reboot Ubuntu/Debian based servers
- name: apt | Upgrade or Install specific packages
  apt:
    name: "{{item}}"
    state: latest
    #only_upgrade: yes
    only_upgrade: "{{ 'yes' if server_update_apt_default == 'update_specific' else 'no' }}"
    #Error from apt module when having upgrade here. Have to separate upgrade dist or upgrade specific package.
#    upgrade: "{{ 'dist' if server_update_apt_default == 'full' | default(omit)}}"
    update_cache: yes
  environment: "{{proxy_env}}"
  register: server_update_apt_install_pkgs_results
  with_items:
    - "{{ server_update_apt_install_pkgs }}"
  when: ansible_os_family == "Debian" and update_default | bool and (server_update_apt_default == "update_specific" or server_update_apt_default == "install")

#because above var was registered in "with_items", cannot print only stdout_lines
- debug: var=server_update_apt_install_pkgs_results.results
  when: ansible_os_family == "Debian" and update_default | bool and (server_update_apt_default == "update_specific" or server_update_apt_default == "install")

- name: apt | Upgrade all packages
  apt:
    state: latest
    upgrade: dist
    #do not use upgrade: safe since it uses aptitude if available, and from testing that doesn't honour apt-mark hold
    #upgrade: safe
    update_cache: yes
  environment: "{{proxy_env}}"
  register: server_update_apt_install_all_results
  when: ansible_os_family == "Debian" and update_default | bool and server_update_apt_default == "full"

- debug: var=server_update_apt_install_all_results.stdout_lines
  when: ansible_os_family == "Debian" and update_default | bool and server_update_apt_default == "full"

#Exclude updating package(s), hack using apt-mark to temp hold before and unhold after update
#Not using dpkg_selections module since it can't use wildcard.
- name: apt | exclude a package from updating (unhold)
  command: "apt-mark unhold {{item}}"
  with_items:
    - "{{ server_update_apt_exclude_pkgs }}"
  when: ansible_os_family == "Debian" and update_default | bool and server_update_apt_exclude_default | bool

- name: apt | Check if reboot is needed because kernel was upgraded
  stat:
    path: /var/run/reboot-required
  register: apt_reboot_hint_result
  when: ansible_os_family == "Debian"

- set_fact:
    reboot_hint_result: false
  when: ansible_os_family == "Debian" and reboot_default | bool and apt_reboot_hint_result.stat.exists == false

- set_fact:
    reboot_hint_result: true
  when: ansible_os_family == "Debian" and reboot_default | bool and apt_reboot_hint_result.stat.exists == true

- name: apt | restart server
  shell: sleep 3 && shutdown -r now "Reboot required (via Ansible)"
  async: 1
  poll: 0
  ignore_errors: true
  become: yes
  when: ansible_os_family == "Debian" and reboot_default | bool and reboot_hint_result | bool

#Upgrade and reboot Redhat/CentOS based servers
- block:
  - name: yum | Upgrade or Install packages
    yum:
      name: "{{server_update_yum_install_pkgs | default('*')}}"
      state: latest
      update_cache: yes
      exclude: "{{server_update_yum_exclude_pkgs | default([])}}"
    environment: "{{proxy_env}}"
    register: stat_yum_upgrade_results
    until: "stat_yum_upgrade_results is success"
    retries: 2
    delay: 30
  rescue:
  - debug: msg='YUM Upgrade failed'
  - meta: flush_handlers
  - fail: msg='YUM Upgrade failed'
  when: ansible_os_family == "RedHat" and update_default | bool

- name: yum | Check if reboot is needed because kernel was upgraded
  shell: LAST_KERNEL=$(rpm -q --last kernel | awk 'NR==1{sub(/kernel-/,""); print $1}'); CURRENT_KERNEL=$(uname -r); if [ $LAST_KERNEL != $CURRENT_KERNEL ]; then echo 'reboot'; else echo 'no'; fi
  changed_when: false
  register: yum_reboot_hint_result
  when: ansible_os_family == "RedHat"

- set_fact:
    reboot_hint_result: false
  when: ansible_os_family == "RedHat" and reboot_default | bool and yum_reboot_hint_result.stdout.find("no") != -1

- set_fact:
    reboot_hint_result: true
  when: ansible_os_family == "RedHat" and reboot_default | bool and yum_reboot_hint_result.stdout.find("reboot") != -1

- name: yum | restart server
  command: /usr/bin/systemd-run --on-active=5 --timer-property=AccuracySec=100ms /usr/bin/systemctl reboot
  async: 0
  poll: 0
  ignore_errors: true
  become: yes
  when: ansible_os_family == "RedHat" and reboot_default | bool and reboot_hint_result | bool

# Wait for server to come back online
- name: wait for server {{ ansible_ssh_host | default(inventory_hostname) }} to come back online
  wait_for:
    port: "{{ server_update_ssh_port }}"
    state: started
    host: '{{ ansible_ssh_host | default(inventory_hostname) }}'
    delay: 10
    sleep: 2
    timeout: 300
    search_regex: OpenSSH
  become: no
  connection: local
  when: server_update_reboot_wait | bool and reboot_default | bool and reboot_hint_result | bool
